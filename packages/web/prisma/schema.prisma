generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Draft {
  id        String   @id @default(cuid())
  data      Json?
  type      PostType
  lang      String
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Post {
  id              String            @id @default(cuid())
  likes           Int               @default(0)
  dislikes        Int               @default(0)
  comments        Int               @default(0)
  type            PostType
  PostTranslation PostTranslation[]
}

model PostTranslation {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String
  lang        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
}

model Skill {
  id               String             @id @default(cuid())
  name             String
  score            Int                @default(0)
  SkillTranslation SkillTranslation[]
}

model SkillTranslation {
  id        String   @id @default(cuid())
  content   String
  lang      String
  createdAt DateTime @default(now()) @map("created_at")
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
}

model Keyword {
  id   String @id @default(cuid())
  name String
  type String
}

model Comment {
  id         String     @id @default(cuid())
  content    String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @map("updated_at")
  objectId   String
  objectType ObjectType
  likes      Int        @default(0)
  dislikes   Int        @default(0)

  rootId      String?   @map("root_id")
  rootComment Comment?  @relation("rootComment", fields: [rootId], references: [id])
  subComments Comment[] @relation("rootComment")

  parentId      String?   @map("parent_id") @db.VarChar
  parentComment Comment?  @relation("parentComment", fields: [parentId], references: [id])
  childComments Comment[] @relation("parentComment")

  @@unique([objectId, objectType])
}

model Like {
  id         String     @id @default(cuid())
  userId     String
  objectId   String
  objectType ObjectType

  @@unique([userId, objectId, objectType])
}

enum PostType {
  BLOG
  PORTFOLIO
  LEARNING
}

enum ObjectType {
  BLOG
  PORTFOLIO
  LEARNING
  COMMENT
}

model Room {
  id      String    @id @default(cuid())
  userId  String
  Message Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
}
